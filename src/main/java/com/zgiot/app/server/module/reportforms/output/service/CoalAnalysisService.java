package com.zgiot.app.server.module.reportforms.output.service;import com.github.pagehelper.PageHelper;import com.github.pagehelper.PageInfo;import com.zgiot.app.server.module.coalanalysis.mapper.CoalAnalysisMapper;import com.zgiot.app.server.module.qualityandquantity.ProportionPieChartParser;import com.zgiot.app.server.module.qualityandquantity.pojo.MetricDataValue;import com.zgiot.app.server.module.qualityandquantity.pojo.ProportionPieChartData;import com.zgiot.app.server.module.reportforms.output.pojo.CoalAnalysisBean;import com.zgiot.app.server.module.reportforms.output.pojo.ProductCoalStatistics;import com.zgiot.app.server.module.reportforms.output.productionmonitor.constant.ReportFormSystemStartConstant;import com.zgiot.app.server.module.reportforms.output.productionmonitor.pojo.ReportFormSystemStartRecord;import com.zgiot.app.server.module.reportforms.output.productionmonitor.service.ReportFormSystemStartService;import com.zgiot.app.server.module.reportforms.output.utils.ReportFormDateUtil;import com.zgiot.app.server.module.tcs.pojo.FilterCondition;import com.zgiot.app.server.service.DataService;import com.zgiot.common.constants.CoalAnalysisConstants;import com.zgiot.common.pojo.CoalAnalysisRecord;import com.zgiot.common.pojo.DataModelWrapper;import org.apache.commons.lang.time.DateUtils;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.stereotype.Service;import java.util.*;@Servicepublic class CoalAnalysisService {    private CoalAnalysisBean coalAnalysisBean = new CoalAnalysisBean();    public static final String AVG_RECORD_KEYWORD = "平均";    private static final Integer ONE_SYSTEM = 1;    private static final Integer TWO_SYSTEM = 2;    private static final String ONETERMCLENED = "oneTermClened";    private static final String TWOTERMCLENED = "twoTermClened";    private static final String ONETERMWASHED = "oneTermWashed";    private static final String TWOTERMWASHED = "twoTermWashed";    @Autowired    private CoalAnalysisMapper coalAnalysisMapper;    @Autowired    private ReportFormSystemStartService reportFormSystemStartService;    @Autowired    private ProportionPieChartParser proportionPieChartParser;    @Autowired    private DataService dataService;    @Autowired    private ReportFormsService reportFormsService;    public CoalAnalysisBean getCoalAnalysisBean(Date dutyStartTime) {        Date nowDutyStartTime = ReportFormDateUtil.getNowDutyStartTime(dutyStartTime);        Date dutyEndStartTime = ReportFormDateUtil.getDutyEndStartTime(dutyStartTime);        coalAnalysisBean.setDutyStartTime(nowDutyStartTime);        Map<String, List<CoalAnalysisRecord>> coalAnalysis = coalAnalysisBean.getCoalAnalysis();        //获取1551精煤        FilterCondition offoClened = new FilterCondition();        offoClened.setStartTime(nowDutyStartTime);        offoClened.setEndTime(dutyEndStartTime);        offoClened.setSystem(ONE_SYSTEM);        offoClened.setTargetList(Collections.singletonList(CoalAnalysisConstants.FIVE_FIVE_ONE_REFINDED));        List<CoalAnalysisRecord> offoRefindedList = coalAnalysisMapper.getCoalAnalysisList(offoClened);        coalAnalysis.put(ONETERMCLENED, offoRefindedList);        //获取2551精煤        FilterCondition tffoClened = new FilterCondition();        tffoClened.setStartTime(nowDutyStartTime);        tffoClened.setEndTime(dutyEndStartTime);        tffoClened.setSystem(TWO_SYSTEM);        tffoClened.setTargetList(Collections.singletonList(CoalAnalysisConstants.FIVE_FIVE_ONE_REFINDED));        List<CoalAnalysisRecord> tffoRefindedList = coalAnalysisMapper.getCoalAnalysisList(tffoClened);        coalAnalysis.put(TWOTERMCLENED, tffoRefindedList);        //获取1552洗混煤        FilterCondition offtWashed = new FilterCondition();        offtWashed.setStartTime(nowDutyStartTime);        offtWashed.setEndTime(dutyEndStartTime);        offtWashed.setSystem(ONE_SYSTEM);        offtWashed.setTargetList(Collections.singletonList(CoalAnalysisConstants.FIVE_FIVE_TWO_WASHED));        List<CoalAnalysisRecord> offtWashedList = coalAnalysisMapper.getCoalAnalysisList(offtWashed);        coalAnalysis.put(ONETERMWASHED, offtWashedList);        //获取2552混洗煤        FilterCondition tfftWashed = new FilterCondition();        tfftWashed.setStartTime(nowDutyStartTime);        tfftWashed.setEndTime(dutyEndStartTime);        tfftWashed.setSystem(TWO_SYSTEM);        tfftWashed.setTargetList(Collections.singletonList(CoalAnalysisConstants.FIVE_FIVE_TWO_WASHED));        List<CoalAnalysisRecord> tfftWashedList = coalAnalysisMapper.getCoalAnalysisList(tfftWashed);        coalAnalysis.put(TWOTERMWASHED, tfftWashedList);        Map<String, CoalAnalysisRecord> coalAnalysisAvg = coalAnalysisBean.getCoalAnalysisAvg();        //获取1551平均值        FilterCondition offoClenedAvg = new FilterCondition();        offoClenedAvg.setStartTime(nowDutyStartTime);        offoClenedAvg.setSystem(ONE_SYSTEM);        offoClenedAvg.setTargetList(Collections.singletonList(CoalAnalysisConstants.FIVE_FIVE_ONE_REFINDED + AVG_RECORD_KEYWORD));        CoalAnalysisRecord avgOffoRefinded = coalAnalysisMapper.getCoalAnalysisAvg(offoClenedAvg);        coalAnalysisAvg.put(ONETERMCLENED, avgOffoRefinded);        //获取2551平均值        FilterCondition tffoClenedAvg = new FilterCondition();        tffoClenedAvg.setStartTime(nowDutyStartTime);        tffoClenedAvg.setSystem(TWO_SYSTEM);        tffoClenedAvg.setTargetList(Collections.singletonList(CoalAnalysisConstants.FIVE_FIVE_ONE_REFINDED + AVG_RECORD_KEYWORD));        CoalAnalysisRecord avgTffoRefindedAvg = coalAnalysisMapper.getCoalAnalysisAvg(tffoClenedAvg);        coalAnalysisAvg.put(TWOTERMCLENED, avgTffoRefindedAvg);        //获取1552平均值        FilterCondition offtWashedAvg = new FilterCondition();        offtWashedAvg.setStartTime(nowDutyStartTime);        offtWashedAvg.setSystem(ONE_SYSTEM);        offtWashedAvg.setTargetList(Collections.singletonList(CoalAnalysisConstants.FIVE_FIVE_TWO_WASHED + AVG_RECORD_KEYWORD));        CoalAnalysisRecord avgOfftWashedAvg = coalAnalysisMapper.getCoalAnalysisAvg(offtWashedAvg);        coalAnalysisAvg.put(ONETERMWASHED, avgOfftWashedAvg);        //获取2552平均值        FilterCondition tfftWashedAvg = new FilterCondition();        tfftWashedAvg.setStartTime(nowDutyStartTime);        tfftWashedAvg.setSystem(TWO_SYSTEM);        tfftWashedAvg.setTargetList(Collections.singletonList(CoalAnalysisConstants.FIVE_FIVE_TWO_WASHED + AVG_RECORD_KEYWORD));        CoalAnalysisRecord avgTfftWashedAvg = coalAnalysisMapper.getCoalAnalysisAvg(tfftWashedAvg);        coalAnalysisAvg.put(TWOTERMWASHED, avgTfftWashedAvg);        return coalAnalysisBean;    }    /**     * 根据其他模块的生产情况和煤质化验组装生产质量统计数据     *     * @param dutyStartTime     * @return     */    public List<ProductCoalStatistics> getProductCoalStatisticsListFromOtherModule(Date dutyStartTime) {        Map<Integer, List<ReportFormSystemStartRecord>> systemStartRecordMap = reportFormSystemStartService.getSystemStartRecords(dutyStartTime);        FilterCondition filterCondition = FilterCondition.FilterConditionBuilder.newFilterCondition().startTime(dutyStartTime).endTime(DateUtils.addHours(dutyStartTime, 12)).build();        List<CoalAnalysisRecord> recordsMatchCondition = coalAnalysisMapper.getRecordsMatchCondition(filterCondition);        /**         * outer key : term    inner key : targetCoal  inner key 2: targetType 灰/水/硫...         */        Map<Integer, Map<String, Map<String, ProductCoalStatistics>>> productCoalStatisticsMap = new HashMap<>();        productCoalStatisticsMap.put(1, new HashMap<>());        productCoalStatisticsMap.put(2, new HashMap<>());        for (CoalAnalysisRecord coalAnalysisRecord : recordsMatchCondition) {            if (coalAnalysisRecord.getSystem() == null || (coalAnalysisRecord.getSystem() != 1 && coalAnalysisRecord.getSystem() != 2)) {                continue;            }            if (CoalAnalysisConstants.FINE_CLEANED_COAL.equals(coalAnalysisRecord.getTarget())) {                CoalAnalysisRecord cloneCoalAnalysisRecord = new CoalAnalysisRecord(coalAnalysisRecord);                cloneCoalAnalysisRecord.setTarget(coalAnalysisRecord.getTarget() + coalAnalysisRecord.getSample());                setTargetTypeInfoToMap(productCoalStatisticsMap, cloneCoalAnalysisRecord);            }            setTargetTypeInfoToMap(productCoalStatisticsMap, coalAnalysisRecord);        }        List<ProductCoalStatistics> productCoalStatisticsTermOne = constructProductCoalStatisticRecord(1, dutyStartTime, systemStartRecordMap, productCoalStatisticsMap);        List<ProductCoalStatistics> productCoalStatisticsTermTwo = constructProductCoalStatisticRecord(2, dutyStartTime, systemStartRecordMap, productCoalStatisticsMap);        productCoalStatisticsTermOne.addAll(productCoalStatisticsTermTwo);        return productCoalStatisticsTermOne;    }    private void setTargetTypeInfoToMap(Map<Integer, Map<String, Map<String, ProductCoalStatistics>>> productCoalStatisticsMap, CoalAnalysisRecord coalAnalysisRecord) {        Map<String, Map<String, ProductCoalStatistics>> termProductCoalStatisticsMap = productCoalStatisticsMap.get(coalAnalysisRecord.getSystem());        Map<String, ProductCoalStatistics> targetTypeStatisticsMap;        if (termProductCoalStatisticsMap.containsKey(coalAnalysisRecord.getTarget())) {            targetTypeStatisticsMap = termProductCoalStatisticsMap.get(coalAnalysisRecord.getTarget());        } else {            targetTypeStatisticsMap = new HashMap<>();            termProductCoalStatisticsMap.put(coalAnalysisRecord.getTarget(), targetTypeStatisticsMap);        }        getTargetTypeCoalValue(coalAnalysisRecord, targetTypeStatisticsMap, coalAnalysisRecord.getAad(), CoalAnalysisConstants.TARGET_TYPE_AAD_SHOW);        getTargetTypeCoalValue(coalAnalysisRecord, targetTypeStatisticsMap, coalAnalysisRecord.getQnetar(), CoalAnalysisConstants.TARGET_TYPE_QNETAR_SHOW);        getTargetTypeCoalValue(coalAnalysisRecord, targetTypeStatisticsMap, coalAnalysisRecord.getMt(), CoalAnalysisConstants.TARGET_TYPE_MT_SHOW);        getTargetTypeCoalValue(coalAnalysisRecord, targetTypeStatisticsMap, coalAnalysisRecord.getStad(), CoalAnalysisConstants.TARGET_TYPE_STAD_SHOW);    }    private List<ProductCoalStatistics> constructProductCoalStatisticRecord(Integer term, Date dutyStartTime, Map<Integer, List<ReportFormSystemStartRecord>> systemStartRecordMap, Map<Integer, Map<String, Map<String, ProductCoalStatistics>>> productCoalStatisticsMap) {        String ratioThingCode;        if (term == 1) {            ratioThingCode = "Quit_SYS_1";        } else {            ratioThingCode = "Quit_SYS_2";        }        MetricDataValue coalValue8 = proportionPieChartParser.getRatioCoalValue(ratioThingCode, "COAL_8_DEVICE", "COAL_8_CF");        MetricDataValue coalValue13 = proportionPieChartParser.getRatioCoalValue(ratioThingCode, "COAL_13_DEVICE", "COAL_13_CF");        ProportionPieChartData proportionPieChartData = new ProportionPieChartData();        Optional<DataModelWrapper> rawCoalDataModel1 = dataService.getData(term + "301", "CT_C");        Optional<DataModelWrapper> rawCoalDataModel2 = dataService.getData(term + "302", "CT_C");        Double rawCoalValue = 0.0;        if (rawCoalDataModel1.isPresent() && rawCoalDataModel1.get().getValue() != null) {            rawCoalValue = Double.valueOf(rawCoalDataModel1.get().getValue());        }        if (rawCoalDataModel2.isPresent() && rawCoalDataModel2.get().getValue() != null) {            rawCoalValue += Double.valueOf(rawCoalDataModel2.get().getValue());        }        proportionPieChartParser.countRatio(proportionPieChartData, coalValue8, coalValue13);        List<ReportFormSystemStartRecord> reportFormSystemStartRecords = systemStartRecordMap.get(term);        Map<String, Map<String, ProductCoalStatistics>> termProductCoalStatisticsMap = productCoalStatisticsMap.get(term);        Integer teamInfo = reportFormsService.getTeamInfo(dutyStartTime);        List<ProductCoalStatistics> termProductCoalStatisticsList = new ArrayList<>();        for (Map.Entry<String, Map<String, ProductCoalStatistics>> outerEntry : termProductCoalStatisticsMap.entrySet()) {            Map<String, ProductCoalStatistics> targetTypeStatisticsMap = outerEntry.getValue();            for (Map.Entry<String, ProductCoalStatistics> innerEntry : targetTypeStatisticsMap.entrySet()) {                ProductCoalStatistics targetStatistics = innerEntry.getValue();                for (ReportFormSystemStartRecord reportFormSystemStartRecord : reportFormSystemStartRecords) {                    if (ReportFormSystemStartConstant.SYSTEM_STARTUP_STATE_START.equals(reportFormSystemStartRecord.getSystemStartupState())) {                        ProductCoalStatistics productCoalStatistics = new ProductCoalStatistics();                        productCoalStatistics.setValue(targetStatistics.getValue());                        productCoalStatistics.setTargetType(targetStatistics.getTargetType());                        productCoalStatistics.setTargetCoal(targetStatistics.getTargetCoal());                        productCoalStatistics.setHeavyMediumLump(reportFormSystemStartRecord.getHeavyMediumLump());                        productCoalStatistics.setHeavyMediumSlack(reportFormSystemStartRecord.getHeavyMediumSlack());                        productCoalStatistics.setTime(reportFormSystemStartRecord.getStartTime());                        productCoalStatistics.setTerm(term);                        productCoalStatistics.setRatio8(proportionPieChartData.getRatioOne());                        productCoalStatistics.setRatio13(proportionPieChartData.getRatioTwo());                        productCoalStatistics.setRawCoal(rawCoalValue);                        termProductCoalStatisticsList.add(productCoalStatistics);                        productCoalStatistics.setTeamId(teamInfo);                    }                }            }        }        return termProductCoalStatisticsList;    }    private void getTargetTypeCoalValue(CoalAnalysisRecord coalAnalysisRecord, Map<String, ProductCoalStatistics> targetTypeStatisticsMap, Double value, String targetTypeShow) {        ProductCoalStatistics coalStatistics;        if (value != null) {            if (targetTypeStatisticsMap.containsKey(targetTypeShow)) {                coalStatistics = targetTypeStatisticsMap.get(targetTypeShow);            } else {                coalStatistics = new ProductCoalStatistics();                coalStatistics.setTargetCoal(coalAnalysisRecord.getTarget());                coalStatistics.setTargetType(targetTypeShow);                targetTypeStatisticsMap.put(targetTypeShow, coalStatistics);            }            coalStatistics.setSumValue(coalStatistics.getSumValue() + value);            coalStatistics.setCount(coalStatistics.getCount() + 1);            coalStatistics.setValue(coalStatistics.getSumValue() / coalStatistics.getCount());        }    }    public void insertProductCoalStatisticsRecords(List<ProductCoalStatistics> productCoalStatisticsList) {        coalAnalysisMapper.insertProductCoalStatisticsRecords(productCoalStatisticsList);    }    public void clearAllProductCoalStatisticsInDuration(Date startTime, Date endTime) {        coalAnalysisMapper.clearAllProductCoalStatisticsInDuration(startTime, endTime);    }    public PageInfo<ProductCoalStatistics> getProductCoalStatisticsListInDuration(ProductCoalStatistics filterCondition, int pageNum, int pageSize) {        if (filterCondition.getEndTime() == null) {            filterCondition.setEndTime(new Date());        }        Date nowDutyStartTime = ReportFormDateUtil.getNowDutyStartTime(new Date());        Date nowDutyEndTime = DateUtils.addHours(nowDutyStartTime, 8);        if ((nowDutyStartTime.after(filterCondition.getStartTime()) || nowDutyStartTime.equals(filterCondition.getStartTime())) && nowDutyStartTime.before(filterCondition.getEndTime())) {            coalAnalysisMapper.clearAllProductCoalStatisticsInDuration(nowDutyStartTime, nowDutyEndTime);            List<ProductCoalStatistics> productCoalStatisticsList = getProductCoalStatisticsListFromOtherModule(nowDutyStartTime);            insertProductCoalStatisticsRecords(productCoalStatisticsList);        }        PageHelper.startPage(pageNum, pageSize);        List<ProductCoalStatistics> productCoalStatisticsRecords = coalAnalysisMapper.getProductCoalStatisticsRecords(filterCondition);        PageInfo<ProductCoalStatistics> pageInfo = new PageInfo<>(productCoalStatisticsRecords);        return pageInfo;    }}